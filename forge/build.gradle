plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

jarJar.enable()

minecraft {
    if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
        if(rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION')) {
            mappings channel: 'parchment', version: "${PARCHMENT_MINECRAFT_VERSION}-${PARCHMENT_MAPPINGS}-${MINECRAFT_VERSION}"
        } else {
            mappings channel: 'parchment', version: "${PARCHMENT_MAPPINGS}-${MINECRAFT_VERSION}"
        }
    } else {
        mappings channel: 'official', version: "${MINECRAFT_VERSION}"
    }

    if(accessTransformerFile.exists()) {
        accessTransformer = accessTransformerFile
    }

    runs {
        client {
            workingDirectory file('run/client')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--width', 1920, '--height', 1080

            mods {
                "${MOD_ID}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run/server')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            args 'nogui'

            mods {
                "${MOD_ID}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run/client')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            forceExit false

            args '--mod', MOD_ID, '--client', '--server', '--validate'
            args '--input', rootProject.file('blockbench/')
            args '--output', project(':common').file('src/main/generated/')
            args '--existing', project(':common').file('src/main/resources/')
            args '--existing', file('src/main/resources/')
            args '--existing-mod', 'apexcore'

            mods {
                "${MOD_ID}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    if(file("src/main/resources/${MOD_ID}.mixins.json").exists()) {
        add sourceSets.main, "${MOD_ID}.refmap.json"
        config "${MOD_ID}.mixins.json"
    }

    if(project(':common').file("src/main/resources/${MOD_ID}-common.mixins.json").exists()) {
        add project(':common').sourceSets.main, "${MOD_ID}-common.refmap.json"
        config "${MOD_ID}-common.mixins.json"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${MINECRAFT_VERSION}-${FORGE_VERSION}"
    annotationProcessor "org.spongepowered:mixin:${MIXIN_VERSION}:processor"

    compileOnly project(':common')
    implementation fg.deobf("xyz.apex.minecraft.apexcore:apexcore-forge:${APEXCORE_DEV_VERSION}+${MINECRAFT_VERSION}")
}

processResources {
    from project(':common').sourceSets.main.resources
}

compileJava {
    source project(':common').sourceSets.main.allSource
}

sourcesJar {
    from project(':common').sourceSets.main.allJava
}

tasks.jarJar.configure {
    classifier ''
}

jar {
    classifier 'slim'
}

artifacts {
    archives tasks.jarJar
}

reobf {
    jarJar { }
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact tasks.jarJar

            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')

                // common
                def depNode = depsNode.appendNode('dependency')
                def prj = project(':common')
                depNode.appendNode('groupId', prj.group)
                depNode.appendNode('artifactId', prj.archivesBaseName)
                depNode.appendNode('version', prj.version)
                depNode.appendNode('scope', 'compile')

                // apexcore
                depNode = depsNode.appendNode('dependency')
                depNode.appendNode('groupId', 'xyz.apex.minecraft.apexcore')
                depNode.appendNode('artifactId', 'apexcore-forge')
                depNode.appendNode('version', "${APEXCORE_DEV_VERSION}")
                depNode.appendNode('scope', 'compile')
            }
        }
    }
}
