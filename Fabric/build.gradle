plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'

	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
}

evaluationDependsOn(':Common')

group = "${APEX_GROUP}.${MOD_ID}.fabric"
version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${MOD_ID}-fabric"

sourceSets.main.resources.srcDirs += 'src/generated/resources'

loom {
	accessWidenerPath = file("src/main/resources/${MOD_ID}.accesswidener")
	enableTransitiveAccessWideners = true

	runs {
		client {
			client()
			setConfigName('fabric client')
			ideConfigGenerated(true)
			runDir('run')
		}

		server {
			server()
			setConfigName('fabric server')
			ideConfigGenerated(true)
			runDir('run')
		}

		data {
			inherit(client)
			setConfigName('fabric data')
			ideConfigGenerated(true)
			runDir('run')
			vmArg('-Dfabric-api.datagen')
			vmArg("-Dfabric-api.datagen.output-dir=${file('src/generated/resources')}")
			vmArg("-Dfabric-api.datagen.modid=${MOD_ID}")
		}
	}

	mods {
		"${MOD_ID}" {
			sourceSet sourceSets.main
			sourceSet project(':Common').sourceSets.main
		}
	}
}

repositories {
	mavenLocal()
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	compileOnly project(':Common')

	modImplementation "com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}"
	modRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"

	// Uncomment all of the below to enable shaders
	// ome of these may or may not be required
	// as fabric brings in some of them
	// but unsure if sodium/iris uses newer versions
	// than what fabric brings in
	// these are just copy pastes from their build scripts
	// to ensure we have everything
	// modRuntimeOnly 'maven.modrinth:sodium:mc1.19.2-0.4.4'
	// modRuntimeOnly 'maven.modrinth:iris:1.19.2-v1.4.3'
	// runtimeOnly 'it.unimi.dsi:fastutil:8.5.6'
	// runtimeOnly 'org.lwjgl:lwjgl:3.3.1'
	// runtimeOnly 'org.lwjgl:lwjgl-opengl:3.3.1'
	// runtimeOnly 'org.apache.commons:commons-lang3:3.12.0'
	// runtimeOnly 'org.joml:joml:1.10.4'
	// runtimeOnly 'org.jetbrains:annotations:23.0.0'
	// runtimeOnly 'io.github.douira:glsl-transformer:1.0.1'
	// runtimeOnly 'org.anarres:jcpp:1.4.14'

	modImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}" // Jade-1.19.1-fabric-8.6.0
	modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-common-api:${JEI_VERSION}"
	modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-fabric-api:${JEI_VERSION}"
	modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"

	modImplementation "${APEX_GROUP}.${APEXCORE_ID}.fabric:${APEXCORE_ID}-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
	include "${APEX_GROUP}.${APEXCORE_ID}.fabric:${APEXCORE_ID}-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
}

processResources {
	duplicatesStrategy DuplicatesStrategy.WARN

	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json', '**/models/**/*.json' ]) {
		expand project.properties
	}

	from project(':Common').sourceSets.main.resources
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

	source(project(':Common').sourceSets.main.allSource)

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
		}
	}
}


java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
	}

	withSourcesJar()
}

jar {
	manifest {
		attributes([
				'Specification-Title': "${MOD_ID}",
				'Specification-Vendor': 'ApexStudios',
				'Specification-Version': '1',
				'Implementation-Title': "${project.name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor': 'ApexStudios',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

artifacts {
	archives jar
	archives sourcesJar
	archives remapJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${project.archivesBaseName}"
			version = "${project.version}"

			artifact jar
			artifact sourcesJar
			artifact remapJar
		}
	}
	repositories {
		maven { url "file:///${rootProject.projectDir}/maven" }

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}

idea.module {
	excludeDirs << file('run')
}
