plugins {
	id 'maven-publish'

	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

evaluationDependsOn(':Common')

group = "${APEX_GROUP}.${MOD_ID}.fabric"
version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${MOD_ID}-fabric"

sourceSets {
	shaders {
		java.srcDirs = [ ]
		resources.srcDirs = [ ]

		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output

		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	runs {
		shaders {
			inherit(client)
			source(sourceSets.shaders)
		}
	}

	createRemapConfigurations(sourceSets.shaders)
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }
	maven { url 'https://maven.covers1624.net/' }
	maven { url 'https://maven.shedaniel.me' }
	maven { url 'https://maven.terraformersmc.com/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	// Main
	modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	modApi "dev.architectury:architectury-fabric:${ARCHITECTURY_VERSION}"
	common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	shadowCommon(project(path: ':Common', configuration: 'transformProductionFabric')) { transitive false }
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	modImplementation "${APEX_GROUP}.${APEXCORE_ID}.fabric:${APEXCORE_ID}-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
	modImplementation("${APEX_GROUP}.${APEXCORE_ID}.fabric:${APEXCORE_ID}-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}") { transitive false }

	// Shaders
	modShadersImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
	modShadersImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_VERSION}+${MINECRAFT_VERSION}"
	shadersImplementation(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	shadersImplementation(project(path: ':Fabric', configuration: 'namedElements')) { transitive false }
	modShadersImplementation "${APEX_GROUP}.${APEXCORE_ID}.fabric:${APEXCORE_ID}-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
	modShadersImplementation("${APEX_GROUP}.${APEXCORE_ID}.fabric:${APEXCORE_ID}-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}") { transitive false }
	shadersImplementation 'com.google.code.findbugs:jsr305:3.0.2'
	// actual shaders mods inclusion
	modShadersRuntimeOnly 'maven.modrinth:sodium:mc1.19.3-0.4.8'
	modShadersRuntimeOnly 'maven.modrinth:iris:1.5.1+1.19.3'
	shadersRuntimeOnly 'io.github.douira:glsl-transformer:2.0.0-pre8'
	shadersRuntimeOnly 'org.anarres:jcpp:1.4.14'

	def recipeLookupIncludeType = rootProject.hasProperty('RECIPE_LOOKUP_INCLUDE') ? rootProject.property('RECIPE_LOOKUP_INCLUDE') : ''

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-fabric-api:${JEI_VERSION}"

		if(recipeLookupIncludeType == 'jei') {
			modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"
			modShadersRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-fabric:${JEI_VERSION}"
		}
	}

	// REI
	if(rootProject.hasProperty('REI_VERSION')) {
		modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${REI_VERSION}"
		modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${REI_VERSION}"

		modShadersCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${REI_VERSION}"
		modShadersCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${REI_VERSION}"

		if(recipeLookupIncludeType == 'rei') {
			modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${REI_VERSION}"
			modShadersRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${REI_VERSION}"
		}
	}

	if(rootProject.hasProperty('EMI_VERSION')) {
		modCompileOnly "dev.emi:emi:${EMI_VERSION}+${MINECRAFT_VERSION}"

		if(recipeLookupIncludeType == 'emi') {
			modRuntimeOnly "dev.emi:emi:${EMI_VERSION}+${MINECRAFT_VERSION}"
		}
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FABRIC_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}"
		modShadersImplementation "curse.maven:jade-${JADE_CF_ID}:${FABRIC_JADE_CF_FILE_ID}"
	}

	// Lazy DFU
	if(rootProject.hasProperty('FABRIC_LAZY_DFU_VERSION')) {
		modRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
		modShadersRuntimeOnly "maven.modrinth:lazydfu:${FABRIC_LAZY_DFU_VERSION}"
	}

	// ModMenu
	if(rootProject.hasProperty('FABRIC_MOD_MENU_VERSION')) {
		modImplementation "com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}"
		modShadersImplementation "com.terraformersmc:modmenu:${FABRIC_MOD_MENU_VERSION}"
	}
}

shadowJar {
	configurations = [ project.configurations.shadowCommon ]
	classifier 'dev-shadow'
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

processResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json', '**/models/**/*.json' ]) {
		expand project.properties
	}

	from project(':Common').sourceSets.main.resources
}

processShadersResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', 'pack.mcmeta', 'fabric.mod.json', '**/models/**/*.json' ]) {
		expand project.properties
	}
}

jar {
	classifier 'dev'
}

sourcesJar {
	def commonSources = project(':Common').sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${project.archivesBaseName}"
			version = "${project.version}"

			from components.java
		}
	}
	repositories {
		maven { url "file:///${rootProject.projectDir}/maven" }

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}
