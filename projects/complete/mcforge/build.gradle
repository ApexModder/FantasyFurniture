apply from: rootProject.file('scripts/mcforge.gradle')
apply plugin: 'me.modmuss50.mod-publish-plugin'

def children = [ ]

rootProject.childProjects.values().forEach { child ->
    if(!child.path.startsWithIgnoreCase(':complete') && (child.path.endsWithIgnoreCase('-common') || child.path.endsWithIgnoreCase('-mcforge'))) {
        def moduleName = child.path.substring(1, child.path.indexOf('-'))

        if(!children.contains(moduleName)) {
            children.add(moduleName)
        }
    }
}

minecraft {
    runs {
        configureEach {
            mods {
                "${MOD_ID}_complete" {
                    source sourceSets.main
                }

                children.forEach { child ->
                    "${MOD_ID}_${child}" {
                        source project(":${child}-mcforge").sourceSets.main
                    }
                }
            }
        }

        client {
            workingDirectory file('run/client')
        }

        if(rootProject.hasProperty('DEVLOGIN_VERSION')) {
            clientLogin {
                parent runs.client
                main 'net.covers1624.devlogin.DevLogin'
                args '--launch_target', '{LAUNCH_TARGET}'
                lazyToken("LAUNCH_TARGET", { runs.client.main })
            }
        }

        server {
            workingDirectory file('run/server')
            args 'nogui'
        }
    }
}

dependencies {
    compileOnly project(path: ':complete-common', configuration: 'namedElements')
    implementation project(':mcforge')

    children.forEach { child ->
        implementation project(":${child}-mcforge")
    }
}

processResources {
    from project(':complete-common').sourceSets.main.resources
}

compileJava {
    source project(':complete-common').sourceSets.main.allSource
}

sourcesJar {
    from project(':complete-common').sourceSets.main.allJava
}

publishing {
    publications {
        release(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact tasks.jarJar
        }
    }
}

publishMods {
    evaluationDependsOn(':mcforge')

    def jarFiles = [
            project(':mcforge').tasks.jar.archiveFile, project(':mcforge').tasks.sourcesJar.archiveFile,
            jar.archiveFile, tasks.sourcesJar.archiveFile
    ]

    children.forEach { child ->
        evaluationDependsOn(":${child}-mcforge")

        jarFiles += [
                project(":${child}-mcforge").tasks.jar.archiveFile,
                project(":${child}-mcforge").tasks.jarJar.archiveFile,
                project(":${child}-mcforge").tasks.sourcesJar.archiveFile
        ]
    }

    file = tasks.jarJar.archiveFile
    changelog = rootProject.file('changelogs/changelog.md').exists() ? rootProject.file('changelogs/changelog.md').getText('UTF-8') : ''
    type = me.modmuss50.mpp.ReleaseType.of("${MOD_RELEASE_TYPE}")
    maxRetries = 5
    version = "${MOD_FULL_VERSION}"
    displayName = "[MinecraftForge] ${MOD_NAME} - ${MOD_FULL_VERSION}+${MINECRAFT_VERSION}"
    modLoaders.add('forge')
    additionalFiles.from(jarFiles)
    dryRun = !providers.environmentVariable('MODRINTH_TOKEN').isPresent() || !providers.environmentVariable('CURSEFORGE_TOKEN').isPresent()

    curseforge {
        projectId = "${MOD_CURSEFORGE_ID}"
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN').getOrNull()
        minecraftVersions.add("${MINECRAFT_VERSION}")

        embeds {
            slug = "${APEXCORE_CURSEFORGE_SLUG}"
        }
    }

    modrinth {
        projectId = "${MOD_MODRINTH_ID}"
        accessToken = providers.environmentVariable('MODRINTH_TOKEN').getOrNull()
        minecraftVersions.add("${MINECRAFT_VERSION}")

        embeds {
            slug = "${APEXCORE_CURSEFORGE_SLUG}"
        }
    }
}