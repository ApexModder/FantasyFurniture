apply from: rootProject.file('scripts/fabric.gradle')

loom {
    runs {
        client {
            client()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        server {
            server()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        if(getRootProject().hasProperty('DEVLOGIN_VERSION')) {
            clientLogin {
                inherit runs.client
                programArgs '--launch_target', 'net.fabricmc.loader.impl.launch.knot.KnotClient'
                mainClass.set 'net.covers1624.devlogin.DevLogin'

                afterEvaluate {
                    vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
                }
            }
        }

        data {
            server()
            ideConfigGenerated true
            vmArg '-Dfabric-api.datagen'
            vmArg "-Dfabric-api.datagen.output-dir=${project(':complete-common').file('src/generated/resources')}"
            vmArg "-Dfabric-api.datagen.modid=${MOD_ID}_complete"
        }
    }

    mods {
        "${MOD_ID}" {
            sourceSet project(':common').sourceSets.main
            sourceSet sourceSets.main
        }

        if(findProject(':nordic-fabric') != null) {
            "${MOD_ID}_nordic" {
                sourceSet project(':nordic-common').sourceSets.main
                sourceSet project(':nordic-fabric').sourceSets.main
            }
        }

        if(findProject(':venthyr-fabric') != null) {
            "${MOD_ID}_venthyr" {
                sourceSet project(':venthyr-common').sourceSets.main
                sourceSet project(':venthyr-fabric').sourceSets.main
            }
        }
    }
}

dependencies {
    compileOnly project(path: ':complete-common', configuration: 'namedElements')
    implementation project(path: ':fabric', configuration: 'namedElements')

    if(findProject(':nordic-fabric') != null) {
        implementation project(path: ':nordic-fabric', configuration: 'namedElements')
        include project(path: ':nordic-fabric', configuration: 'namedElements')
    }

    if(findProject(':venthyr-fabric') != null) {
        implementation project(path: ':venthyr-fabric', configuration: 'namedElements')
        include project(path: ':venthyr-fabric', configuration: 'namedElements')
    }
}

processResources {
    from project(':complete-common').sourceSets.main.resources
}

compileJava {
    source project(':complete-common').sourceSets.main.allSource
}

sourcesJar {
    from project(':complete-common').sourceSets.main.allJava
}