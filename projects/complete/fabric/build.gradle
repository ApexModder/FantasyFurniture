apply from: rootProject.file('scripts/fabric.gradle')
apply plugin: 'me.modmuss50.mod-publish-plugin'

def children = [ ]

rootProject.childProjects.values().forEach { child ->
    if(!child.path.startsWithIgnoreCase(':complete') && (child.path.endsWithIgnoreCase('-common') || child.path.endsWithIgnoreCase('-fabric'))) {
        def moduleName = child.path.substring(1, child.path.indexOf('-'))

        if(!children.contains(moduleName)) {
            children.add(moduleName)
        }
    }
}

loom {
    runs {
        client {
            client()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        server {
            server()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        if(getRootProject().hasProperty('DEVLOGIN_VERSION')) {
            clientLogin {
                inherit runs.client
                programArgs '--launch_target', 'net.fabricmc.loader.impl.launch.knot.KnotClient'
                mainClass.set 'net.covers1624.devlogin.DevLogin'

                afterEvaluate {
                    vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
                }
            }
        }

        data {
            server()
            ideConfigGenerated true
            vmArg '-Dfabric-api.datagen'
            vmArg "-Dfabric-api.datagen.output-dir=${project(':complete-common').file('src/generated/resources')}"
            vmArg "-Dfabric-api.datagen.modid=${MOD_ID}_complete"
        }
    }

    mods {
        "${MOD_ID}" {
            sourceSet project(':common').sourceSets.main
            sourceSet sourceSets.main
        }

        children.forEach { child ->
            "${MOD_ID}_${child}" {
                sourceSet project(":${child}-common").sourceSets.main
                sourceSet project(":${child}-fabric").sourceSets.main
            }
        }
    }
}

dependencies {
    compileOnly project(path: ':complete-common', configuration: 'namedElements')
    implementation project(path: ':fabric', configuration: 'namedElements')

    children.forEach { child ->
        implementation project(path: ":${child}-fabric", configuration: 'namedElements')
        include project(":${child}-fabric")
    }
}

processResources {
    from project(':complete-common').sourceSets.main.resources
}

compileJava {
    source project(':complete-common').sourceSets.main.allSource
}

sourcesJar {
    from project(':complete-common').sourceSets.main.allJava
}

publishMods {
    evaluationDependsOn(':fabric')

    def jarFiles = [
            project(':fabric').tasks.remapJar.archiveFile, project(':fabric').tasks.remapSourcesJar.archiveFile,
            tasks.remapSourcesJar.archiveFile
    ]

    children.forEach { child ->
        evaluationDependsOn(":${child}-fabric")

        jarFiles += [
                project(":${child}-fabric").tasks.remapJar.archiveFile,
                project(":${child}-fabric").tasks.remapSourcesJar.archiveFile
        ]
    }

    file = remapJar.archiveFile
    changelog = rootProject.file('changelogs/changelog.md').exists() ? rootProject.file('changelogs/changelog.md').getText('UTF-8') : ''
    type = me.modmuss50.mpp.ReleaseType.of("${rootProject.MOD_RELEASE_TYPE}")
    maxRetries = 5
    version = "${MOD_FULL_VERSION}"
    displayName = "[Fabric] ${MOD_NAME} - ${MOD_FULL_VERSION}+${MINECRAFT_VERSION}"
    modLoaders.add('fabric')
    additionalFiles.from(jarFiles)
    dryRun = !providers.environmentVariable('MODRINTH_TOKEN').isPresent() || !providers.environmentVariable('CURSEFORGE_TOKEN').isPresent()

    curseforge {
        projectId = "${MOD_CURSEFORGE_ID}"
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN').getOrNull()
        minecraftVersions.add("${MINECRAFT_VERSION}")

        requires {
            slug = "${FABRIC_CURSEFORGE_SLUG}"
        }

        requires {
            slug = "${APEXCORE_CURSEFORGE_SLUG}"
        }
    }

    modrinth {
        projectId = "${MOD_MODRINTH_ID}"
        accessToken = providers.environmentVariable('MODRINTH_TOKEN').getOrNull()
        minecraftVersions.add("${MINECRAFT_VERSION}")

        requires {
            slug = "${FABRIC_CURSEFORGE_SLUG}"
        }

        requires {
            slug = "${APEXCORE_CURSEFORGE_SLUG}"
        }
    }
}