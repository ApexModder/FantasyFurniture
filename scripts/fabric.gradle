apply plugin: 'fabric-loom'

loom {
    accessWidenerPath = getRootProject().file("projects/platforms/fabric/src/main/resources/${MOD_ID}.accesswidener")
    mixin.defaultRefmapName = "${MOD_ID}.refmap.json"
}

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

    mappings(loom.layered {
        officialMojangMappings()

        if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
            if(rootProject.hasProperty('PARCHMENT_DEV_MINECRAFT_VERSION')) {
                parchment("org.parchmentmc.data:parchment-${PARCHMENT_DEV_MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
            } else {
                parchment("org.parchmentmc.data:parchment-${MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
            }
        }
    })

    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"

    if(rootProject.hasProperty('FABRIC_API_MINECRAFT_VERSION')) {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${FABRIC_API_MINECRAFT_VERSION}"
    } else {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${MINECRAFT_VERSION}"
    }

    compileOnly project(path: ':common', configuration: 'namedElements')

    if(rootProject.hasProperty('DEVLOGIN_VERSION')) {
        localRuntime "net.covers1624:DevLogin:${DEVLOGIN_VERSION}"
    }

    annotationProcessor "io.github.llamalad7:mixinextras-fabric:${MIXIN_EXTRAS_VERSION}"
    implementation "io.github.llamalad7:mixinextras-fabric:${MIXIN_EXTRAS_VERSION}"

    // to stop fabric complaining about missing jetbrains anno classes
    runtimeOnly 'org.jetbrains:annotations:24.0.1'

    if(rootProject.hasProperty('APEXCORE_DEV_VERSION')) {
        if(APEXCORE_DEV_VERSION.endsWithIgnoreCase('-SNAPSHOT')) {
            modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}"
            // TODO:
            // include "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}"
        } else {
            modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}+${MINECRAFT_VERSION}"
            // TODO:
            // include "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}+${MINECRAFT_VERSION}"
        }
    } else {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
        // TODO:
        // include "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
    }

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
}

collectJars {
    def tasks = [ remapJar, remapSourcesJar ]
    dependsOn tasks
    from tasks
}

publishing {
    publications {
        release(MavenPublication) {
            loom.disableDeprecatedPomGeneration(it)

            artifact remapJar
            artifact sourcesJar
        }
    }
}