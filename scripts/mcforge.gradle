apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

minecraft {
    if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
        if(rootProject.hasProperty('PARCHMENT_DEV_MINECRAFT_VERSION')) {
            mappings channel: 'parchment', version: "${PARCHMENT_DEV_MINECRAFT_VERSION}-${PARCHMENT_MAPPINGS}-${MINECRAFT_VERSION}"
        } else {
            mappings channel: 'parchment', version: "${PARCHMENT_MAPPINGS}-${MINECRAFT_VERSION}"
        }
    } else {
        mappings channel: 'official', version: "${MINECRAFT_VERSION}"
    }

    accessTransformer = rootProject.file('projects/platforms/mcforge/src/main/resources/META-INF/accesstransformer.cfg')

    enableIdeaPrepareRuns = false
    copyIdeResources = true
    generateRunFolders = true

    runs {
        configureEach {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            folderName 'mcforge'

            // Some of these may require JBR
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:+IgnoreUnrecognizedVMOptions'
            jvmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            // TODO: Find a FG way to do this, below code is for FabricLoom
            /*afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }*/

            mods {
                "${MOD_ID}" {
                    source project(':mcforge').sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${MOD_ID}.refmap.json"

    if(file("src/main/resources/${MOD_ID}.mixins.json").exists()) {
        config "${MOD_ID}.mixins.json"
    }

    if(project(':common').file("src/main/resources/${MOD_ID}-common.mixins.json").exists()) {
        config "${MOD_ID}-common.mixins.json"
    }
}

repositories {
    maven {
        url 'https://maven.minecraftforge.net'
    }
}

dependencies {
    if(rootProject.hasProperty('MCFORGE_DEV_VERSION')) {
        minecraft "net.minecraftforge:forge:${MINECRAFT_VERSION}-${MCFORGE_DEV_VERSION}"
    } else {
        minecraft "net.minecraftforge:forge:${MINECRAFT_VERSION}-${MCFORGE_VERSION}"
    }

    annotationProcessor "org.spongepowered:mixin:${MIXIN_VERSION}:processor"
    annotationProcessor "io.github.llamalad7:mixinextras-common:${MIXIN_EXTRAS_VERSION}"
    implementation "io.github.llamalad7:mixinextras-common:${MIXIN_EXTRAS_VERSION}"

    compileOnly project(path: ':common', configuration: 'namedElements')

    if(rootProject.hasProperty('APEXCORE_DEV_VERSION')) {
        implementation fg.deobf("xyz.apex.minecraft.apexcore:apexcore-mcforge:${APEXCORE_DEV_VERSION}+${MINECRAFT_VERSION}")
    } else {
        implementation fg.deobf("xyz.apex.minecraft.apexcore:apexcore-mcforge:${APEXCORE_VERSION}+${MINECRAFT_VERSION}")
    }

    if(rootProject.hasProperty('DEVLOGIN_VERSION')) {
        runtimeOnly "net.covers1624:DevLogin:${DEVLOGIN_VERSION}"
    }
}

jar.finalizedBy('reobfJar')

afterEvaluate {
    if(tasks.jarJar.enabled) {
        tasks.jarJar.configure {
            archiveClassifier.set('')
            finalizedBy 'reobfJarJar'
            mustRunAfter 'reobfJar'
        }

        jar {
            archiveClassifier.set('slim')
        }

        artifacts {
            archives tasks.jarJar
        }

        reobf {
            jarJar { }
        }
    }

    collectJars {
        def tasks = tasks.jarJar.enabled ? [ jar, sourcesJar, tasks.jarJar ] : [ jar, sourcesJar ]
        dependsOn tasks
        from tasks
    }
}