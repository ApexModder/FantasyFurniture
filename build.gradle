plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT' apply false
    id 'dev.architectury.loom' version '0.12.0-SNAPSHOT' apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1' apply false
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

    group = "${MOD_GROUP}.${project.name}"
    version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
    archivesBaseName = "${MOD_ID}-${project.name}"

    sourceSets {
        main.resources.srcDirs = [ 'src/main/resources', 'src/main/generated' ]

        test {
            java.srcDirs = [ ]
            resources.srcDirs = [ ]
        }
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.parchmentmc.org' }
        maven { url 'https://maven.apexstudios.dev' }
        maven { url 'https://maven.shedaniel.me' }
        maven { url 'https://maven.blamejared.com/' }
        maven { url 'https://maven.terraformersmc.com/releases/' }

        maven {
            url 'https://www.cursemaven.com'
            content { includeGroup 'curse.maven' }
        }

        maven {
            url 'https://api.modrinth.com/maven'
            content { includeGroup 'maven.modrinth' }
        }
    }

    dependencies {
        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
        compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
    }

    processResources {
        project.properties.each {
            inputs.property "${it.key}", "${it.value}"
        }

        filesMatching([ '*.mixins.json', 'pack.mcmeta', 'META-INF/mods.toml', 'fabric.mod.json', 'architectury.common.json' ]) {
            expand project.properties
        }
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
        }

        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

        javaToolchains {
            compilerFor {
                languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
            }
        }
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title': "${MOD_ID}",
                    'Specification-Vendor': 'ApexStudios',
                    'Specification-Version': "${MINECRAFT_VERSION}",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${project.version}",
                    'Implementation-Vendor': 'ApexStudios',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    if(project.name != 'data') {
        apply plugin: 'maven-publish'
        apply plugin: 'architectury-plugin'
        apply plugin: 'dev.architectury.loom'

        project.ext {
            accessWidenerFile = rootProject.file("common/src/main/resources/${MOD_ID}.accesswidener")
        }

        architectury {
            minecraft = "${MINECRAFT_VERSION}"
        }

        loom {
            silentMojangMappingsLicense()
            enableTransitiveAccessWideners = true

            if(accessWidenerFile.exists()) {
                accessWidenerPath = accessWidenerFile
            }
        }

        dependencies {
            minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

            mappings(loom.layered {
                officialMojangMappings()

                if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
                    def mcVersion = rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION') ? "${PARCHMENT_MINECRAFT_VERSION}" : "${MINECRAFT_VERSION}"
                    parchment("org.parchmentmc.data:parchment-${mcVersion}:${PARCHMENT_MAPPINGS}@zip")
                }
            })
        }

        publishing {
            publications {
                mavenCommon(MavenPublication) {
                    groupId = "${project.group}"
                    artifactId = "${project.archivesBaseName}"
                    version = "${project.version}"

                    loom.disableDeprecatedPomGeneration(it)

                    artifact remapJar
                    artifact sourcesJar
                }
            }

            repositories {
                if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
                    maven {
                        name 'ApexStudios-Maven'
                        url 'https://maven.apexstudios.dev'

                        credentials {
                            username System.getenv('APEX_MODS_MAVEN_USERNAME')
                            password System.getenv('APEX_MODS_MAVEN_PASSWORD')
                        }
                    }
                }
            }
        }
    }
}

apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

idea.module {
    excludeDirs += [
            file('.idea'),
            file('.gradle'),
            file('gradle')
    ]
}
