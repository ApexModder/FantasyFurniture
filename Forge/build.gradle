plugins {
	id 'maven-publish'

	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

evaluationDependsOn(':Common')

group = "${APEX_GROUP}.${MOD_ID}.forge"
version = "${MOD_VERSION}+${MINECRAFT_VERSION}"
archivesBaseName = "${MOD_ID}-forge"

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	runs {
		clientAuthed {
			inherit(client)
		}
	}

	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

		mixinConfig "${MOD_ID}.mixins.json"
		mixinConfig "${MOD_ID}-common.mixins.json"
	}

	settingsPostEdit.add(new java.util.function.Consumer<net.fabricmc.loom.configuration.ide.RunConfig>() {
		@Override
		void accept(net.fabricmc.loom.configuration.ide.RunConfig runConfig) {
			if(runConfig.configName.toLowerCase(Locale.ROOT).contains('authed')) {
				runConfig.programArgs.add('--launch_target')
				runConfig.programArgs.add(runConfig.mainClass)
				runConfig.mainClass = 'net.covers1624.devlogin.DevLogin'
			}
		}
	})
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "file:///${rootProject.projectDir}/maven" }
	maven { url 'https://maven.parchmentmc.org' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://modmaven.dev/' }
	maven { url 'https://maven.covers1624.net/' }
	maven { url 'https://maven.shedaniel.me' }
	maven { url 'https://maven.blamejared.com/' }

	maven {
		url 'https://www.cursemaven.com'
		content { includeGroup 'curse.maven' }
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	forge "net.minecraftforge:forge:${MINECRAFT_VERSION}-${FORGE_VERSION}"
	modApi "dev.architectury:architectury-forge:${ARCHITECTURY_VERSION}"

	// Main
	runtimeClasspath "net.covers1624:DevLogin:${DEVLOGIN_VERSION}"
	common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
	shadowCommon(project(path: ':Common', configuration: 'transformProductionForge')) { transitive false }
	modImplementation("${APEX_GROUP}.${APEXCORE_ID}.forge:${APEXCORE_ID}-forge:${APEXCORE_VERSION}+${MINECRAFT_VERSION}") { transitive false }

	def recipeLookupIncludeType = rootProject.hasProperty('RECIPE_LOOKUP_INCLUDE') ? rootProject.property('RECIPE_LOOKUP_INCLUDE') : ''

	// JEI
	if(rootProject.hasProperty('JEI_VERSION')) {
		modCompileOnlyApi "mezz.jei:jei-${MINECRAFT_VERSION}-forge-api:${JEI_VERSION}"

		if(recipeLookupIncludeType == 'jei') {
			modRuntimeOnly "mezz.jei:jei-${MINECRAFT_VERSION}-forge:${JEI_VERSION}"
		}
	}

	// REI
	if(rootProject.hasProperty('REI_VERSION')) {
		modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-forge:${REI_VERSION}"
		modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${REI_VERSION}"
		modCompileOnly "me.shedaniel:RoughlyEnoughItems-forge:${REI_VERSION}" // This should be `modRuntimeOnly` but annotations only exist here and we need those at compile time

		if(recipeLookupIncludeType == 'rei') {
			modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-forge:${REI_VERSION}"
		}
	}

	// Jade
	if(rootProject.hasProperty('JADE_CF_ID') && rootProject.hasProperty('FORGE_JADE_CF_FILE_ID')) {
		modImplementation "curse.maven:jade-${JADE_CF_ID}:${FORGE_JADE_CF_FILE_ID}"
	}

	// ClothConfig
	if(rootProject.hasProperty('CLOTH_CONFIG_VERSION')) {
		modApi "me.shedaniel.cloth:cloth-config-forge:${CLOTH_CONFIG_VERSION}"
	}
}

shadowJar {
	configurations = [ project.configurations.shadowCommon ]
	classifier 'dev-shadow'
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

processResources {
	project.properties.each { key, value ->
		inputs.property "${key}", "${value}"
	}

	filesMatching([ '*.mixins.json', '**/*.mcmeta', 'META-INF/mods.toml', '**/models/**/*.json' ]) {
		expand project.properties
	}
}

jar {
	classifier 'dev'
}

sourcesJar {
	def commonSources = project(':Common').sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${project.archivesBaseName}"
			version = "${project.version}"

			from components.java
		}
	}

	repositories {
		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexStudios-Maven'
				url 'https://maven.apexstudios.dev'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}
