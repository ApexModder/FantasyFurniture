pluginManagement {
    repositories {
        exclusiveContent {
            forRepository { maven { url 'https://maven.minecraftforge.net' } }
            filter { includeGroupByRegex 'net\\.minecraftforge.*' }
        }

        exclusiveContent {
            forRepository { maven { url 'https://maven.fabricmc.net' } }
            filter {
                includeGroup 'net.fabricmc'
                includeGroup 'fabric-loom'
            }
        }

        exclusiveContent {
            forRepository { maven { url 'https://maven.parchmentmc.org' } }
            filter { includeGroupByRegex 'org\\.parchmentmc.*' }
        }

        exclusiveContent {
            forRepository { maven { url 'https://repo.spongepowered.org/repository/maven-public' } }
            filter { includeGroupByRegex 'org\\.spongepowered.*' }
        }

        gradlePluginPortal()
    }

    resolutionStrategy {
        eachPlugin {
            if(requested.id.id == "org.spongepowered.mixin") {
                useModule("org.spongepowered:mixingradle:${requested.version}")
            }
        }
    }
}

def platforms = [
        'common',
        'forge',
        'fabric'
]

def modules = [
        'nordic'
]

platforms.forEach { platform ->
    println "Setting up Platform: '${platform}'"
    include(platform)
    project(":${platform}").projectDir = file("platforms/${platform}")

    include(":workspace-${platform}")
    project(":workspace-${platform}").projectDir = file("workspace/${platform}")
}

modules.forEach { module ->
    platforms.forEach { platform ->
        def dir = file("modules/${module}/${platform}")

        if(new File(dir, 'build.gradle').exists()) {
            println "Setting up Module: '${module}-${platform}'"
            include("${module}-${platform}")
            project(":${module}-${platform}").projectDir = dir
        }
    }
}

rootProject.name = "${MOD_NAME}-${MINECRAFT_VERSION}"