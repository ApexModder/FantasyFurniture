apply from: rootProject.file('gradle/scripts/forge.gradle')

def FF_modules = [ ]

rootProject.childProjects.values().forEach { prj ->
    if(prj.path.endsWithIgnoreCase('-common') || prj.path.endsWithIgnoreCase('-forge')) {
        def moduleName = prj.path.substring(1, prj.path.indexOf('-'))

        if(!FF_modules.contains(moduleName)) {
            FF_modules.add(moduleName)
        }
    }
}

minecraft {
    runs {
        client {
            workingDirectory file('run/client')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            property "${MOD_ID}.test_elements.enabled", 'true'
            ideaModule "${rootProject.name}.${project.name}.main"
            jvmArg '-XX:+AllowEnhancedClassRedefinition' // requires JBR
            folderName 'forge'

            mods {
                "${MOD_ID}" {
                    source project(':common').sourceSets.main
                    source sourceSets.main
                }

                FF_modules.forEach { module ->
                    "${MOD_ID}_${it}" {
                        source project(":${module}-common").sourceSets.main
                        source project(":${module}-forge").sourceSets.main
                    }
                }
            }
        }

        if(rootProject.hasProperty('DEVLOGIN_VERSION')) {
            clientLogin {
                parent runs.client
                main 'net.covers1624.devlogin.DevLogin'
                args '--launch_target', '{LAUNCH_TARGET}'
                lazyToken("LAUNCH_TARGET", { runs.client.main })
            }
        }

        server {
            workingDirectory file('run/server')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            property "${MOD_ID}.test_elements.enabled", 'true'
            ideaModule "${rootProject.name}.${project.name}.main"
            args 'nogui'
            jvmArg '-XX:+AllowEnhancedClassRedefinition' // requires JBR
            folderName 'forge'

            mods {
                "${MOD_ID}" {
                    source project(':common').sourceSets.main
                    source sourceSets.main
                }

                FF_modules.forEach { module ->
                    "${MOD_ID}_${it}" {
                        source project(":${module}-common").sourceSets.main
                        source project(":${module}-forge").sourceSets.main
                    }
                }
            }
        }

        data {
            workingDirectory file('run/client')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            folderName 'forge'

            args '--mod', MOD_ID, '--client', '--server', '--validate'
            args '--output', file('src/generated/resources')
            args '--existing', project(':common').file('src/main/resources/')
            args '--existing', file('src/main/resources/')

            mods {
                "${MOD_ID}" {
                    source project(':common').sourceSets.main
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    /*FF_modules.forEach { module ->
        runtimeOnly project(path: ":${module}-forge", configuration: 'namedElements')
    }*/
}

afterEvaluate {
    [ 'compileJava', 'processResources', 'classes' ].forEach { taskName ->
        tasks.getByName(taskName) { task ->
            FF_modules.forEach { module ->
                finalizedBy(":${module}-forge:${taskName}")
            }
        }
    }
}

processResources {
    from project(':common').sourceSets.main.resources
}

compileJava {
    source project(':common').sourceSets.main.allSource
}

sourcesJar {
    from project(':common').sourceSets.main.allJava
}